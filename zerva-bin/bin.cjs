#!/usr/bin/env node
"use strict";var a=require("path"),p=require("fs"),w=require("esbuild"),V=require("child_process");function k(){var O,z,P;let m="?",x={root:".",buildMode:!1,outfile:""};try{m=require((0,a.resolve)(process.cwd(),"package.json")).version}catch{}try{let e=require((0,a.resolve)(process.cwd(),"zerva.conf.js"));e&&Object.assign(x,e)}catch{}let n,u=(0,a.resolve)(".out.cjs"),i=!1;function A(){var N;let e=process.argv.slice(2),o={help:["h","?"]},l=r=>r,_=Object.entries(o).reduce((r,t)=>{let[h,f]=t;typeof f=="string"&&(f=[f]);for(let C of f)r[l(C)]=l(h);return r},{}),c={},s;for(let r of e){let t=r;if(/^--?/.test(r)||s==null){if(s=r.replace(/^--?/,""),r.includes("=")){let[h,f]=s.split("=",2);s=h.trim(),t=f.trim()}else t=!0;s=l(s),s=(N=_[s])!=null?N:s}s!=null&&(r==="false"?t=!1:r==="true"&&(t=!0),c[s]==null||typeof c[s]=="boolean"?c[s]=t:Array.isArray(c[s])?c[s].push(t):c[s]=[c[s],t])}return c}let v=((P=(z=(O=process.argv)==null?void 0:O[1])==null?void 0:z.trim())==null?void 0:P.toLocaleLowerCase())||"",y=A();if(console.log(v,"args",y),y.help){console.info(`usage: ${v} [options]`);return}let E=!1;v==="build"||v==="minimal"?(n=process.argv[3],u=(0,a.resolve)("dist/main.cjs"),i=!0,E=v==="minimal"):(process.env.NODE_OPTIONS="--enable-source-maps",n=process.argv[2]);let S=["zerva.ts","zerva.js","service.ts","service.js","main.ts","main.js","zerva/main.ts","zerva/main.js","service/main.ts","service/main.js","src/zerva.ts","src/zerva.js","src/service.ts","src/service.js","src/main.ts","src/main.js","index.ts","index.js","zerva/index.ts","zerva/index.js","service/index.ts","service/index.js","src/index.ts","src/index.js"];if(n)n=(0,a.resolve)(n);else for(let e of S)if((0,p.existsSync)((0,a.resolve)(e))){n=e;break}(0,p.existsSync)(n)||(console.error(`Zerva: Cannot find entry file: ${n}`),process.exit(1)),process.argv.splice(2,process.argv.length-2);let d,g;async function j(){d&&(console.log(`Zerva: Stopping app
`),new Promise(e=>g=e),d.kill("SIGTERM"),d=void 0)}async function b(){await j(),d=(0,V.spawn)(process.execPath,[u],{cwd:process.cwd(),stdio:"inherit",env:{...process.env,ZERVA_MODE:"development",ZERVA_VERSION:m}}),console.info("Zerva: Starting app"),d.on("error",e=>{console.error("Node process error:",e)}),d.on("close",e=>{g&&(g(),g=void 0)})}function R(e){if(!i){let o=require("node-notifier");o&&o.notify({title:"Zerva Build Error",message:String(e),icon:(0,a.resolve)(__dirname,"icon.png"),sound:!0})}}function Z(e){let o=(0,a.normalize)(e),l=process.env.HOME;return l&&o.startsWith(l)?"~"+o.slice(l.length):o}console.info(`Zerva: Building from "${Z(n)}"`),(0,w.build)({target:"es2020",bundle:!0,entryPoints:[n],banner:{js:i?`#!/usr/bin/env node

// Generated by Zerva <https://holtwick.de/zerva>
`:`// Temporary Build. Generated by Zerva <https://holtwick.de/zerva>
`},footer:{},legalComments:"none",outfile:u,platform:"node",sourcemap:E?void 0:!0,loader:{".json":"json"},define:{ZERVA_DEVELOPMENT:!i,ZERVA_PRODUCTION:i,ZERVA_VERSION:`"${m}"`,"process.env.ZERVA_DEVELOPMENT":!i,"process.env.ZERVA_PRODUCTION":i,"process.env.ZERVA_VERSION":`"${m}"`},minify:i,watch:i?!1:{onRebuild(e,o){j(),e?R(e):(console.info("Zerva: Rebuild succeeded."),b())}},external:["notifier","node-notifier","esbuild","vite"]}).then(e=>{try{(0,p.chmodSync)(u,493)}catch{}i?console.info(`Zerva: Building to "${Z(u)}" succeeded.`):b()}).catch(e=>{R(e)})}k();
